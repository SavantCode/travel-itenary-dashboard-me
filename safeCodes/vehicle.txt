  import React, { useState } from 'react';

  // ==============================
  // ========== ICONS ============
  // ==============================

  const ChevronDownIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 text-gray-500">
      <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
    </svg>
  );

  const CalendarIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-500">
      <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25M3 18.75h18M-4.5 12h22.5" />
    </svg>
  );

  const ClockIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-500">
      <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
  );

  const TrashIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-600 hover:text-red-500">
      <path strokeLinecap="round" strokeLinejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21M4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562a48.11 48.11 0 013.478-.397m7.5 0v-.916a2.2 2.2 0 00-2.09-2.201 51.964 51.964 0 00-3.32 0 2.2 2.2 0 00-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
    </svg>
  );

  const MoreHorizontalIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6 text-white">
      <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM12.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM18.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" />
    </svg>
  );

  // ==============================
  // ======== DATA TYPES =========
  // ==============================

  type DriveType = 'self-drive' | 'with-driver';

  interface VehicleDetails {
    driveType: DriveType;
    vehicleType: string;
    numVehicles: number;
    pickUpDate: string;
    pickUpLocation: string;
    dropOffDate: string;
    dropOffLocation: string;
    vehicleBrand?: string;
    pickUpTime?: string;
    dropOffTime?: string;
    remark?: string;
  }

  // ==============================
  // ========= MAIN ==============
  // ==============================

  const Vehicle: React.FC = () => {
    const [details, setDetails] = useState<VehicleDetails>({
      driveType: 'with-driver',
      vehicleType: 'Carnival (Kia)',
      numVehicles: 1,
      pickUpDate: '2024-02-18',
      pickUpLocation: 'Singapore Airport',
      dropOffDate: '2024-02-22',
      dropOffLocation: 'Singapore Airport',
      pickUpTime: '15:00',
      dropOffTime: '10:00',
      vehicleBrand: '',
      remark: ''
    });

    const handleInputChange = (field: keyof VehicleDetails, value: string | number) => {
      setDetails(prev => ({ ...prev, [field]: value }));
    };

    const handleSubmit = () => {
      console.log("Submitted Details:", details);
      alert("Vehicle details submitted!");
    };

    const renderSummaryItem = (label: string, value: string | undefined) =>
      value ? (
        <div className="flex items-start">
          <p className="font-semibold text-xs text-gray-800 w-28">{label}:</p>
          <p className="text-xs text-gray-600">{value}</p>
        </div>
      ) : null;

    return (
      <div className="bg-[#F6F6FA] min-h-screen p-4 sm:p-6 lg:p-8 font-sans">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-2xl font-semibold text-[#10A4B0] mb-2">Vehicle*</h1>
          <hr className="border-gray-300 mb-6" />

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Left Form Panel */}
            <div className="lg:col-span-2 bg-white border border-gray-200 rounded-lg p-4 sm:p-6 space-y-5">
              {/* Drive Type Selection */}
              <div className="space-y-3">
                <div className="flex items-center gap-8">
                  {['self-drive', 'with-driver'].map((type) => (
                    <label key={type} className="flex items-center gap-2 cursor-pointer text-sm font-medium">
                      <input
                        type="radio"
                        name="driveType"
                        value={type}
                        checked={details.driveType === type}
                        onChange={() => handleInputChange('driveType', type)}
                        className="h-4 w-4 accent-[#10A4B0]"
                      />
                      {type === 'self-drive' ? 'Self Drive' : 'Vehicle with Driver'}
                    </label>
                  ))}
                </div>
                <hr className="border-gray-200" />
              </div>

              {/* Vehicle Type & Count */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <InputField
                  label="Vehicle Type"
                  placeholder="Type here"
                  value={details.vehicleType}
                  onChange={e => handleInputChange('vehicleType', e.target.value)}
                />
                <InputField
                  label="No. of Vehicles"
                  placeholder="Type here"
                  type="number"
                  value={details.numVehicles}
                  onChange={e => handleInputChange('numVehicles', parseInt(e.target.value) || 0)}
                />
              </div>

              {/* Pickup */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <InputField
                  label="Pick Up Date"
                  type="date"
                  value={details.pickUpDate}
                  onChange={e => handleInputChange('pickUpDate', e.target.value)}
                  icon={<CalendarIcon />}
                />
                <InputField
                  label="Pick Up Location"
                  placeholder="Enter Address..."
                  value={details.pickUpLocation}
                  onChange={e => handleInputChange('pickUpLocation', e.target.value)}
                />
              </div>

              {/* Dropoff */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <InputField
                  label="Drop Off Date"
                  type="date"
                  value={details.dropOffDate}
                  onChange={e => handleInputChange('dropOffDate', e.target.value)}
                  icon={<CalendarIcon />}
                />
                <InputField
                  label="Drop Off Location"
                  placeholder="Enter Address..."
                  value={details.dropOffLocation}
                  onChange={e => handleInputChange('dropOffLocation', e.target.value)}
                />
              </div>

              {/* Optional Fields */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <InputField
                  label="Vehicle Brand (Optional)"
                  placeholder="Type here"
                  value={details.vehicleBrand}
                  onChange={e => handleInputChange('vehicleBrand', e.target.value)}
                />
                <InputField
                  label="Pick Up Time (Optional)"
                  type="time"
                  value={details.pickUpTime}
                  onChange={e => handleInputChange('pickUpTime', e.target.value)}
                  icon={<ClockIcon />}
                />
                <InputField
                  label="Drop Off Time (Optional)"
                  type="time"
                  value={details.dropOffTime}
                  onChange={e => handleInputChange('dropOffTime', e.target.value)}
                  icon={<ClockIcon />}
                />
              </div>

              <hr className="border-gray-200" />

              {/* Remarks */}
              <div>
                <div className="flex justify-between items-center mb-2">
                  <h3 className="text-sm font-medium text-gray-800">Add Image & Remark</h3>
                  <button><TrashIcon /></button>
                </div>
                <div className="border border-gray-300 rounded-md">
                  <div className="bg-gray-100 p-2 border-b border-gray-300 flex gap-2">
                    <button className="p-1 border border-gray-400 rounded font-bold">B</button>
                    <button className="p-1 border border-gray-400 rounded italic">I</button>
                    <button className="p-1 border border-gray-400 rounded underline">U</button>
                  </div>
                  <textarea
                    value={details.remark}
                    onChange={e => handleInputChange('remark', e.target.value)}
                    placeholder="Enter a short overview"
                    className="w-full h-24 p-2 text-sm bg-white rounded-b-md focus:outline-none"
                  />
                </div>
              </div>

              {/* Submit */}
              <div className="flex justify-center">
                <button
                  onClick={handleSubmit}
                  className="px-12 py-2 bg-[#10A4B0] text-white rounded-md font-semibold text-sm hover:bg-[#0d8a95] transition-colors"
                >
                  Submit
                </button>
              </div>
            </div>

            {/* Right Sidebar */}
            <div className="lg:col-span-1">
              <div className="bg-white border border-gray-200 rounded-lg">
                <div className="p-4 border-b border-gray-200">
                  <h2 className="text-xl font-semibold text-gray-600">Save Details</h2>
                </div>
                <div className="p-4">
                  <div className="border border-gray-200 rounded-lg">
                    <div className="bg-[#10A4B0] text-white p-3 rounded-t-lg flex justify-between items-center">
                      <h3 className="font-semibold">Vehicle</h3>
                      <button><MoreHorizontalIcon /></button>
                    </div>
                    <div className="p-4 space-y-3">
                      {renderSummaryItem("Type", details.vehicleType)}
                      {renderSummaryItem("No. of Vehicles", details.numVehicles.toString())}
                      <hr className="border-gray-200" />
                      <div className="space-y-1">
                        <p className="font-bold text-xs text-gray-800">Pick up:</p>
                        <p className="text-xs text-gray-600 pl-4">{new Date(details.pickUpDate).toLocaleDateString('en-GB')}</p>
                        <p className="text-xs text-gray-600 pl-4">Time: {details.pickUpTime}</p>
                        <p className="text-xs text-gray-600 pl-4">{details.pickUpLocation}</p>
                      </div>
                      <hr className="border-gray-200" />
                      <div className="space-y-1">
                        <p className="font-bold text-xs text-gray-800">Drop Off:</p>
                        <p className="text-xs text-gray-600 pl-4">{new Date(details.dropOffDate).toLocaleDateString('en-GB')}</p>
                        <p className="text-xs text-gray-600 pl-4">Time: {details.dropOffTime}</p>
                        <p className="text-xs text-gray-600 pl-4">{details.dropOffLocation}</p>
                      </div>
                    </div>
                    <div className="p-4 border-t border-gray-200">
                      <button className="w-full bg-[#10A4B0] text-white py-2 rounded-md font-semibold text-sm hover:bg-[#0d8a95] transition-colors">
                        Edit
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // ==============================
  // ==== Input Field Helper =====
  // ==============================

  interface InputFieldProps {
    label: string;
    value?: string | number;
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    placeholder?: string;
    type?: string;
    icon?: React.ReactNode;
  }

  const InputField: React.FC<InputFieldProps> = ({ label, icon, ...props }) => (
    <div>
      <label htmlFor={label} className="text-xs font-medium text-gray-700 block mb-1">{label}</label>
      <div className="relative">
        <input
          id={label}
          {...props}
          className="w-full p-2 bg-[#F6F6FA] rounded-md text-sm border border-gray-200 focus:ring-2 focus:ring-[#10A4B0] focus:border-transparent"
        />
        {icon && (
          <div className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none">
            {icon}
          </div>
        )}
      </div>
    </div>
  );

  export default Vehicle;




  //-=====================================================================================================================================
  // import React, { useState } from 'react';

  // //-=================================-//
  // //-============[ ICONS ]============-//
  // //-=================================-//

  // const ChevronDownIcon = () => (
  //   <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 text-gray-500">
  //     <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
  //   </svg>
  // );

  // const CalendarIcon = () => (
  //     <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-500">
  //         <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0h18M-4.5 12h22.5" />
  //     </svg>
  // );

  // const ClockIcon = () => (
  //     <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-500">
  //         <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" />
  //     </svg>
  // );

  // const TrashIcon = () => (
  //     <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-600 hover:text-red-500">
  //         <path strokeLinecap="round" strokeLinejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
  //     </svg>
  // );

  // const MoreHorizontalIcon = () => (
  //     <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6 text-white">
  //         <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM12.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM18.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" />
  //     </svg>
  // );


  // //-=================================-//
  // //-========[ DATA & TYPES ]=========//
  // //-=================================-//

  // type DriveType = 'self-drive' | 'with-driver';

  // interface VehicleDetails {
  //     driveType: DriveType;
  //     vehicleType: string;
  //     numVehicles: number;
  //     pickUpDate: string;
  //     pickUpLocation: string;
  //     dropOffDate: string;
  //     dropOffLocation: string;
  //     vehicleBrand?: string;
  //     pickUpTime?: string;
  //     dropOffTime?: string;
  //     remark?: string;
  // }

  // //-=================================-//
  // //-======[ MAIN COMPONENT ]=========//
  // //-=================================-//

  // const Vehicle: React.FC = () => {
  //     const [details, setDetails] = useState<VehicleDetails>({
  //         driveType: 'with-driver',
  //         vehicleType: 'Carnival (Kia)',
  //         numVehicles: 1,
  //         pickUpDate: '2024-02-18',
  //         pickUpLocation: 'Singapore Airport',
  //         dropOffDate: '2024-02-22',
  //         dropOffLocation: 'Singapore Airport',
  //         pickUpTime: '15:00',
  //         dropOffTime: '10:00',
  //         vehicleBrand: '',
  //         remark: ''
  //     });

  //     const handleInputChange = (field: keyof VehicleDetails, value: string | number) => {
  //         setDetails(prev => ({ ...prev, [field]: value }));
  //     };
      
  //     const handleSubmit = () => {
  //         console.log("Submitting Vehicle Details:", details);
  //         alert("Vehicle details submitted! Check the console for the data.");
  //     };

  //     const renderSummaryItem = (label: string, value: string | undefined) => (
  //         value ? (
  //             <div className="flex items-start">
  //                 <p className="font-semibold text-xs text-gray-800 w-28">{label}:</p>
  //                 <p className="text-xs text-gray-600">{value}</p>
  //             </div>
  //         ) : null
  //     );

  //     return (
  //         <div className="bg-[#F6F6FA] min-h-screen p-4 sm:p-6 lg:p-8 font-sans">
  //             <div className="max-w-7xl mx-auto">
  //                 <h1 className="text-2xl font-semibold text-[#10A4B0] mb-2">Vehicle*</h1>
  //                 <hr className="border-gray-300 mb-6" />

  //                 <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
  //                     {/* Main Content Form */}
  //                     <div className="lg:col-span-2 bg-white border border-gray-200 rounded-lg p-4 sm:p-6 space-y-5">
  //                         {/* Drive Type Radio */}
  //                         <div className="space-y-3">
  //                             <div className="flex items-center gap-8">
  //                                 <label className="flex items-center gap-2 cursor-pointer text-sm font-medium">
  //                                     <input type="radio" name="driveType" value="self-drive" checked={details.driveType === 'self-drive'} onChange={() => handleInputChange('driveType', 'self-drive')} className="h-4 w-4 accent-[#10A4B0]" />
  //                                     Self Drive
  //                                 </label>
  //                                 <label className="flex items-center gap-2 cursor-pointer text-sm font-medium">
  //                                     <input type="radio" name="driveType" value="with-driver" checked={details.driveType === 'with-driver'} onChange={() => handleInputChange('driveType', 'with-driver')} className="h-4 w-4 accent-[#10A4B0]" />
  //                                     Vehicle with Driver
  //                                 </label>
  //                             </div>
  //                             <hr className="border-gray-200" />
  //                         </div>

  //                         {/* Vehicle Type & Number */}
  //                         <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
  //                             <InputField label="Vehicle Type" placeholder="Type here" value={details.vehicleType} onChange={e => handleInputChange('vehicleType', e.target.value)} dropdown />
  //                             <InputField label="No. of Vehicles" placeholder="Type here" type="number" value={details.numVehicles} onChange={e => handleInputChange('numVehicles', parseInt(e.target.value))} dropdown />
  //                         </div>

  //                         {/* Pick Up Section */}
  //                         <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
  //                            <InputField label="Pick Up Date" type="date" value={details.pickUpDate} onChange={e => handleInputChange('pickUpDate', e.target.value)} icon={<CalendarIcon />} />
  //                            <InputField label="Pick Up Location" placeholder="Enter Address..." value={details.pickUpLocation} onChange={e => handleInputChange('pickUpLocation', e.target.value)} dropdown />
  //                         </div>

  //                         {/* Drop Off Section */}
  //                         <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
  //                            <InputField label="Drop Off Date" type="date" value={details.dropOffDate} onChange={e => handleInputChange('dropOffDate', e.target.value)} icon={<CalendarIcon />} />
  //                            <InputField label="Drop Off Location" placeholder="Enter Address..." value={details.dropOffLocation} onChange={e => handleInputChange('dropOffLocation', e.target.value)} dropdown />
  //                         </div>

  //                         {/* Optional Fields */}
  //                         <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
  //                             <InputField label="Vehicle Brand (Optional)" placeholder="Type here" value={details.vehicleBrand} onChange={e => handleInputChange('vehicleBrand', e.target.value)} />
  //                             <InputField label="Pick Up Time (Optional)" type="time" value={details.pickUpTime} onChange={e => handleInputChange('pickUpTime', e.target.value)} icon={<ClockIcon />} />
  //                             <InputField label="Drop Off Time (Optional)" type="time" value={details.dropOffTime} onChange={e => handleInputChange('dropOffTime', e.target.value)} icon={<ClockIcon />} />
  //                         </div>
                          
  //                         <hr className="border-gray-200" />

  //                         {/* Add Image & Remark */}
  //                         <div>
  //                             <div className="flex justify-between items-center mb-2">
  //                                 <h3 className="text-sm font-medium text-gray-800">Add Image & Remark</h3>
  //                                 <button><TrashIcon /></button>
  //                             </div>
  //                             <div className="border border-gray-300 rounded-md">
  //                                 <div className="bg-gray-100 p-2 border-b border-gray-300">
  //                                     <div className="flex gap-2">
  //                                         <button className="p-1 border border-gray-400 rounded font-bold">B</button>
  //                                         <button className="p-1 border border-gray-400 rounded italic">I</button>
  //                                         <button className="p-1 border border-gray-400 rounded underline">U</button>
  //                                     </div>
  //                                 </div>
  //                                 <textarea value={details.remark} onChange={(e) => handleInputChange('remark', e.target.value)} placeholder="Enter a short overview" className="w-full h-24 p-2 text-sm bg-white rounded-b-md focus:outline-none" />
  //                             </div>
  //                         </div>

  //                         {/* Submit Button */}
  //                         <div className="flex justify-center">
  //                             <button onClick={handleSubmit} className="px-12 py-2 bg-[#10A4B0] text-white rounded-md font-semibold text-sm hover:bg-[#0d8a95] transition-colors">
  //                                 Submit
  //                             </button>
  //                         </div>
  //                     </div>

  //                     {/* Right Sidebar: Save Details */}
  //                     <div className="lg:col-span-1">
  //                         <div className="bg-white border border-gray-200 rounded-lg">
  //                             <div className="p-4 border-b border-gray-200">
  //                                 <h2 className="text-xl font-semibold text-gray-600">Save Details</h2>
  //                             </div>
  //                             <div className="p-4">
  //                                 <div className="border border-gray-200 rounded-lg">
  //                                     <div className="bg-[#10A4B0] text-white p-3 rounded-t-lg flex justify-between items-center">
  //                                         <h3 className="font-semibold">Vehicle</h3>
  //                                         <button><MoreHorizontalIcon /></button>
  //                                     </div>
  //                                     <div className="p-4 space-y-3">
  //                                         {renderSummaryItem("Type", details.vehicleType)}
  //                                         {renderSummaryItem("No. of Vehicles", details.numVehicles.toString())}
  //                                         <hr className="border-gray-200" />
                                          
  //                                         <div className="space-y-1">
  //                                             <p className="font-bold text-xs text-gray-800">Pick up:</p>
  //                                             <p className="text-xs text-gray-600 pl-4">{new Date(details.pickUpDate).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</p>
  //                                             <p className="text-xs text-gray-600 pl-4">Time: {details.pickUpTime}</p>
  //                                             <p className="text-xs text-gray-600 pl-4">{details.pickUpLocation}</p>
  //                                         </div>
  //                                         <hr className="border-gray-200" />

  //                                         <div className="space-y-1">
  //                                             <p className="font-bold text-xs text-gray-800">Drop Off:</p>
  //                                             <p className="text-xs text-gray-600 pl-4">{new Date(details.dropOffDate).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</p>
  //                                             <p className="text-xs text-gray-600 pl-4">Time: {details.dropOffTime}</p>
  //                                             <p className="text-xs text-gray-600 pl-4">{details.dropOffLocation}</p>
  //                                         </div>

  //                                     </div>
  //                                     <div className="p-4 border-t border-gray-200">
  //                                         <button className="w-full bg-[#10A4B0] text-white py-2 rounded-md font-semibold text-sm hover:bg-[#0d8a95] transition-colors">
  //                                             Edit
  //                                         </button>
  //                                     </div>
  //                                 </div>
  //                             </div>
  //                         </div>
  //                     </div>
  //                 </div>
  //             </div>
  //         </div>
  //     );
  // };

  // //-=================================-//
  // //-======[ HELPER COMPONENT ]=======//
  // //-=================================-//

  // interface InputFieldProps {
  //     label: string;
  //     value?: string | number;
  //     onChange?: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => void;
  //     placeholder?: string;
  //     type?: string;
  //     icon?: React.ReactNode;
  //     dropdown?: boolean;
  // }

  // const InputField: React.FC<InputFieldProps> = ({ label, icon, dropdown, ...props }) => (
  //     <div>
  //         <label className="text-xs font-medium text-gray-700 block mb-1">{label}</label>
  //         <div className="relative">
  //             <input
  //                 {...props}
  //                 className="w-full p-2 bg-[#F6F6FA] rounded-md text-sm border border-gray-200 focus:ring-2 focus:ring-[#10A4B0] focus:border-transparent"
  //             />
  //             {(icon || dropdown) && (
  //                 <div className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none">
  //                     {icon ? icon : <ChevronDownIcon />}
  //                 </div>
  //             )}
  //         </div>
  //     </div>
  // );

  // export default Vehicle;

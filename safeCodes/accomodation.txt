import React, { useState, useEffect } from 'react';

//-=================================-//
//-============[ ICONS ]============-//
//-=================================-//

// Simple SVG icon components used in the UI.
const SearchIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-400">
    <path strokeLinecap="round" strokeLinejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
  </svg>
);

const ChevronDownIcon = () => (
  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4 text-gray-500">
    <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
  </svg>
);

const CalendarIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-500">
        <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0h18M-4.5 12h22.5" />
    </svg>
);

const StarIcon = ({ filled }: { filled: boolean }) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill={filled ? "#FFC107" : "none"} stroke="currentColor" strokeWidth={1.5} className="w-4 h-4 text-yellow-500">
    <path strokeLinecap="round" strokeLinejoin="round" d="M11.48 3.499a.562.562 0 011.04 0l2.125 5.111a.563.563 0 00.475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 00-.182.557l1.285 5.385a.562.562 0 01-.84.61l-4.725-2.885a.563.563 0 00-.586 0L6.982 20.54a.562.562 0 01-.84-.61l1.285-5.386a.562.562 0 00-.182-.557l-4.204-3.602a.563.563 0 01.321-.988l5.518-.442a.563.563 0 00.475-.345L11.48 3.5z" />
  </svg>
);

const TrashIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-gray-600 hover:text-red-500">
        <path strokeLinecap="round" strokeLinejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
    </svg>
);

const MoreHorizontalIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6 text-white">
        <path strokeLinecap="round" strokeLinejoin="round" d="M6.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM12.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM18.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0z" />
    </svg>
);


//-=================================-//
//-========[ DATA & TYPES ]=========//
//-=================================-//

// Interface for a single hotel object.
interface Hotel {
  id: number;
  name: string;
  location: {
    country: string;
    city: string;
  };
  rating: number;
  images: string[];
}

// Interface for details of a single room.
interface RoomDetails {
  roomType: string;
  mealType: string;
}

// Mock hotel data based on the user's provided data structure.
const hotelsData: Hotel[] = [
    {
        id: 1,
        name: 'Park Regis Singapore',
        location: { country: 'Singapore', city: 'Singapore' },
        rating: 4,
        images: ['https://i.pinimg.com/736x/b6/6b/e4/b66be4e3cfae7ac25b9f42d1ea57492c.jpg'],
    },
    {
        id: 2,
        name: 'Marina Bay Sands',
        location: { country: 'Singapore', city: 'Singapore' },
        rating: 5,
        images: ['https://i.pinimg.com/736x/5d/25/4b/5d254b0df439de6dcac942a1d841eef6.jpg'],
    },
    {
        id: 3,
        name: 'Hotel Royal Palace',
        location: { country: 'India', city: 'Delhi' },
        rating: 4.3,
        images: ['https://i.pinimg.com/474x/f1/63/ab/f163ab2a46628234668a878a83d81f4e.jpg'],
    },
    {
        id: 4,
        name: 'The Manhattan Tower',
        location: { country: 'USA', city: 'New York' },
        rating: 4.8,
        images: ['https://i.pinimg.com/736x/5f/5b/c7/5f5bc76d5fb5e936c185df2cea318733.jpg'],
    },
];

// Options for various dropdowns in the form.
const roomCountOptions = [1, 2, 3, 4, 5];
const roomTypeOptions = ['Standard', 'Deluxe', 'Suite', 'Family Room'];
const mealTypeOptions = ['Room Only', 'Breakfast', 'Half Board', 'Full Board'];


//-=================================-//
//-======[ MAIN COMPONENT ]=========//
//-=================================-//

/**
 * Accommodation component that allows users to search for hotels,
 * add room details, and view a summary.
 */
const Accommodation: React.FC = () => {
    // State for the search query.
    const [searchQuery, setSearchQuery] = useState('');
    // State for the filtered list of hotels based on the search query.
    const [filteredHotels, setFilteredHotels] = useState<Hotel[]>([]);
    // State for the currently selected hotel.
    const [selectedHotel, setSelectedHotel] = useState<Hotel | null>(hotelsData[0]);
    // State for the number of rooms.
    const [numRooms, setNumRooms] = useState(1);
    // State for check-in and check-out dates.
    const [checkInDate, setCheckInDate] = useState('2024-02-18');
    const [checkOutDate, setCheckOutDate] = useState('2024-02-20');
    // State for the details of each room.
    const [roomDetails, setRoomDetails] = useState<RoomDetails[]>([{ roomType: 'Standard', mealType: 'Breakfast' }]);
    // State for the remark/overview text.
    const [remark, setRemark] = useState('');

    /**
     * Effect to filter hotels whenever the search query changes.
     */
    useEffect(() => {
        if (searchQuery.trim() === '') {
            setFilteredHotels([]);
        } else {
            const lowercasedQuery = searchQuery.toLowerCase();
            const results = hotelsData.filter(
                (hotel) =>
                    hotel.name.toLowerCase().includes(lowercasedQuery) ||
                    hotel.location.city.toLowerCase().includes(lowercasedQuery) ||
                    hotel.location.country.toLowerCase().includes(lowercasedQuery)
            );
            setFilteredHotels(results);
        }
    }, [searchQuery]);

    /**
     * Effect to update the roomDetails array when the number of rooms changes.
     */
    useEffect(() => {
        setRoomDetails((prevDetails) => {
            const newDetails = [...prevDetails];
            while (newDetails.length < numRooms) {
                newDetails.push({ roomType: 'Standard', mealType: 'Breakfast' });
            }
            return newDetails.slice(0, numRooms);
        });
    }, [numRooms]);

    /**
     * Handles changes in the room details (type or meal).
     * @param index - The index of the room being updated.
     * @param field - The field to update ('roomType' or 'mealType').
     * @param value - The new value for the field.
     */
    const handleRoomDetailChange = (index: number, field: keyof RoomDetails, value: string) => {
        const newDetails = [...roomDetails];
        newDetails[index] = { ...newDetails[index], [field]: value };
        setRoomDetails(newDetails);
    };

    /**
     * Handles selecting a hotel from the search results.
     * @param hotel - The hotel object that was selected.
     */
    const handleSelectHotel = (hotel: Hotel) => {
        setSelectedHotel(hotel);
        setSearchQuery(hotel.name);
        setFilteredHotels([]);
    };

    /**
     * Handles form submission.
     */
    const handleSubmit = () => {
        // Basic validation
        if (!selectedHotel || !checkInDate || !checkOutDate) {
            alert('Please fill in all required fields.');
            return;
        }
        
        const submissionData = {
            hotel: selectedHotel,
            rooms: numRooms,
            checkIn: checkInDate,
            checkOut: checkOutDate,
            roomDetails,
            remark,
        };
        console.log('Form Submitted:', submissionData);
        alert('Accommodation details submitted! Check the console for the data.');
    };

    /**
     * Handles deleting the form data.
     */
    const handleDelete = () => {
        setSelectedHotel(null);
        setSearchQuery('');
        setNumRooms(1);
        setCheckInDate('');
        setCheckOutDate('');
        setRoomDetails([{ roomType: 'Standard', mealType: 'Breakfast' }]);
        setRemark('');
        alert('Form cleared!');
    };

    return (
        <div className="bg-[#F6F6FA] min-h-screen p-4 sm:p-6 lg:p-8 font-sans">
            <div className="max-w-7xl mx-auto">
                <h1 className="text-2xl font-semibold text-[#10A4B0] mb-2">Accommodation*</h1>
                <hr className="border-gray-300 mb-6" />

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Main Content: Search and Details Form */}
                    <div className="lg:col-span-2 bg-white border border-gray-200 rounded-lg p-4 sm:p-6 space-y-6">
                        {/* Search Section */}
                        <div className="relative">
                            <label htmlFor="search-accommodation" className="text-sm font-medium text-gray-800 block mb-2">
                                Search Accommodation from database
                            </label>
                            <div className="relative">
                                <input
                                    id="search-accommodation"
                                    type="text"
                                    value={searchQuery}
                                    onChange={(e) => setSearchQuery(e.target.value)}
                                    placeholder="Search Accommodation."
                                    className="w-full pl-10 pr-10 py-2 bg-[#F6F6FA] rounded-md text-sm border border-gray-200 focus:ring-2 focus:ring-[#10A4B0] focus:border-transparent"
                                />
                                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <SearchIcon />
                                </div>
                                <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                                    <ChevronDownIcon />
                                </div>
                            </div>
                            {filteredHotels.length > 0 && (
                                <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                    {filteredHotels.map((hotel) => (
                                        <div
                                            key={hotel.id}
                                            onClick={() => handleSelectHotel(hotel)}
                                            className="p-3 hover:bg-gray-100 cursor-pointer flex items-center gap-4"
                                        >
                                            <img src={hotel.images[0]} alt={hotel.name} className="w-16 h-16 object-cover rounded-md" />
                                            <div>
                                                <p className="font-semibold">{hotel.name}</p>
                                                <p className="text-sm text-gray-500">{hotel.location.city}, {hotel.location.country}</p>
                                                <div className="flex items-center">
                                                    {Array.from({ length: 5 }).map((_, i) => (
                                                        <StarIcon key={i} filled={i < hotel.rating} />
                                                    ))}
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                         {/* Selected Hotel Display */}
                        {selectedHotel && !searchQuery && (
                             <div className="p-3 border border-gray-200 rounded-lg flex items-center gap-4">
                                <img src={selectedHotel.images[0]} alt={selectedHotel.name} className="w-24 h-24 object-cover rounded-md" />
                                <div>
                                    <p className="font-bold text-lg">{selectedHotel.name}</p>
                                    <p className="text-sm text-gray-600">{selectedHotel.location.city}, {selectedHotel.location.country}</p>
                                    <div className="flex items-center mt-1">
                                        {Array.from({ length: 5 }).map((_, i) => (
                                            <StarIcon key={i} filled={i < selectedHotel.rating} />
                                        ))}
                                    </div>
                                    <a href="#" className="text-sm text-blue-600 underline mt-1 block">View on Map</a>
                                </div>
                            </div>
                        )}

                        <hr className="border-gray-200" />

                        {/* Add Room Details Section */}
                        <div>
                            <h3 className="text-sm font-medium text-gray-800 mb-4">Add Room Details</h3>
                            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                                {/* No. of Rooms */}
                                <div>
                                    <label className="text-xs font-medium text-gray-700 block mb-1">No. of Rooms</label>
                                    <select
                                        value={numRooms}
                                        onChange={(e) => setNumRooms(parseInt(e.target.value))}
                                        className="w-full p-2 bg-[#F6F6FA] rounded-md text-sm border border-gray-200"
                                    >
                                        {roomCountOptions.map(count => <option key={count} value={count}>{count}</option>)}
                                    </select>
                                </div>
                                {/* Check In */}
                                <div>
                                    <label className="text-xs font-medium text-gray-700 block mb-1">Check In</label>
                                    <div className="relative">
                                        <input type="date" value={checkInDate} onChange={e => setCheckInDate(e.target.value)} className="w-full p-2 bg-[#F6F6FA] rounded-md text-sm border border-gray-200 pr-8" />
                                        <div className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none">
                                            <CalendarIcon />
                                        </div>
                                    </div>
                                </div>
                                {/* Check Out */}
                                <div>
                                    <label className="text-xs font-medium text-gray-700 block mb-1">Check Out</label>
                                    <div className="relative">
                                        <input type="date" value={checkOutDate} onChange={e => setCheckOutDate(e.target.value)} className="w-full p-2 bg-[#F6F6FA] rounded-md text-sm border border-gray-200 pr-8" />
                                        <div className="absolute inset-y-0 right-0 pr-2 flex items-center pointer-events-none">
                                            <CalendarIcon />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Room Specific Details */}
                        <div className="space-y-4">
                            {Array.from({ length: numRooms }).map((_, index) => (
                                <div key={index} className="grid grid-cols-1 sm:grid-cols-3 gap-4 items-end">
                                    <p className="text-xs font-medium text-gray-800 sm:col-span-1">Room {index + 1} :</p>
                                    <div className="sm:col-span-1">
                                        <label className="text-xs font-medium text-gray-700 block mb-1">Room Type</label>
                                        <select
                                            value={roomDetails[index]?.roomType || ''}
                                            onChange={(e) => handleRoomDetailChange(index, 'roomType', e.target.value)}
                                            className="w-full p-2 bg-[#F6F6FA] rounded-md text-sm border border-gray-200"
                                        >
                                            {roomTypeOptions.map(type => <option key={type} value={type}>{type}</option>)}
                                        </select>
                                    </div>
                                    <div className="sm:col-span-1">
                                        <label className="text-xs font-medium text-gray-700 block mb-1">Meal Type</label>
                                        <select
                                            value={roomDetails[index]?.mealType || ''}
                                            onChange={(e) => handleRoomDetailChange(index, 'mealType', e.target.value)}
                                            className="w-full p-2 bg-[#F6F6FA] rounded-md text-sm border border-gray-200"
                                        >
                                            {mealTypeOptions.map(type => <option key={type} value={type}>{type}</option>)}
                                        </select>
                                    </div>
                                </div>
                            ))}
                        </div>

                        <hr className="border-gray-200" />

                        {/* Add Image & Remark Section */}
                        <div>
                            <div className="flex justify-between items-center mb-2">
                                <h3 className="text-sm font-medium text-gray-800">Add Image & Remark</h3>
                                <button><TrashIcon /></button>
                            </div>
                            <div className="border border-gray-300 rounded-md">
                                <div className="bg-gray-100 p-2 border-b border-gray-300">
                                    {/* Dummy icons for text editor */}
                                    <div className="flex gap-2">
                                        <button className="p-1 border border-gray-400 rounded">B</button>
                                        <button className="p-1 border border-gray-400 rounded italic">I</button>
                                        <button className="p-1 border border-gray-400 rounded underline">U</button>
                                    </div>
                                </div>
                                <textarea
                                    value={remark}
                                    onChange={(e) => setRemark(e.target.value)}
                                    placeholder="Enter a short overview"
                                    className="w-full h-24 p-2 text-sm bg-white rounded-b-md focus:outline-none"
                                />
                            </div>
                        </div>

                        <hr className="border-gray-200" />

                        {/* Action Buttons */}
                        <div className="flex justify-center gap-4">
                            <button
                                onClick={handleDelete}
                                className="px-10 py-2 bg-gray-100 text-gray-700 border border-gray-300 rounded-md font-semibold text-sm hover:bg-gray-200 transition-colors"
                            >
                                Delete
                            </button>
                            <button
                                onClick={handleSubmit}
                                className="px-10 py-2 bg-[#10A4B0] text-white rounded-md font-semibold text-sm hover:bg-[#0d8a95] transition-colors"
                            >
                                Submit
                            </button>
                        </div>
                    </div>

                    {/* Right Sidebar: Save Details */}
                    <div className="lg:col-span-1">
                        <div className="bg-white border border-gray-200 rounded-lg">
                            <div className="p-4 border-b border-gray-200">
                                <h2 className="text-xl font-semibold text-gray-600">Save Details</h2>
                            </div>
                            <div className="p-4 space-y-4">
                                {selectedHotel ? (
                                    <div className="border border-gray-200 rounded-lg">
                                        <div className="bg-[#10A4B0] text-white p-3 rounded-t-lg flex justify-between items-center">
                                            <h3 className="font-semibold">Accommodation</h3>
                                            <button><MoreHorizontalIcon /></button>
                                        </div>
                                        <div className="p-4 space-y-3">
                                            <div>
                                                <p className="font-bold">{selectedHotel.name}</p>
                                                <div className="flex items-center">
                                                    {Array.from({ length: 5 }).map((_, i) => (
                                                        <StarIcon key={i} filled={i < selectedHotel.rating} />
                                                    ))}
                                                </div>
                                                <p className="text-sm text-gray-600">{selectedHotel.location.city} ({selectedHotel.location.country})</p>
                                            </div>
                                            <hr />
                                            <div className="flex justify-between items-center text-sm">
                                                <div>
                                                    <p className="text-gray-600">Check In:</p>
                                                    <p className="font-bold">{new Date(checkInDate).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</p>
                                                </div>
                                                <div className="flex items-center">
                                                     <div className="w-16 h-px bg-[#10A4B0]"></div>
                                                     <div className="bg-[#10A4B0] text-white text-xs rounded-full h-6 w-6 flex items-center justify-center font-bold">
                                                         {
                                                             (() => {
                                                                const start = new Date(checkInDate);
                                                                const end = new Date(checkOutDate);
                                                                const diffTime = Math.abs(end.getTime() - start.getTime());
                                                                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                                                                return diffDays > 0 ? `${diffDays}N` : '...';
                                                             })()
                                                         }
                                                     </div>
                                                     <div className="w-16 h-px bg-[#10A4B0]"></div>
                                                </div>
                                                <div className="text-right">
                                                    <p className="text-gray-600">Check Out:</p>
                                                    <p className="font-bold">{new Date(checkOutDate).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div className="p-4">
                                            <button className="w-full bg-[#10A4B0] text-white py-2 rounded-md font-semibold text-sm hover:bg-[#0d8a95] transition-colors">
                                                Edit
                                            </button>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="text-center text-gray-500 p-8">
                                        <p>No accommodation selected.</p>
                                        <p className="text-sm">Search for a hotel to see details here.</p>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Accommodation;


// import React from 'react';

// const Accommodation = () => {
//   return (
//     <div className="p-6">
//       <h1 className="text-2xl font-bold">Accommodation</h1>
//       <p>This is the Accommodation step.</p>
//     </div>
//   );
// };

// export default Accommodation;

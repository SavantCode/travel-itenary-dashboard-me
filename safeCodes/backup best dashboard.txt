import React, { useState, memo } from 'react';
import { Search, ChevronDown, Users, DollarSign, TrendingUp, MapPin, ArrowUpRight } from 'lucide-react';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, LabelList, ResponsiveContainer,
  PieChart, Pie, Cell, LineChart, Line
} from 'recharts';

// --- DUMMY DATA ---
// In a real application, this would come from an API.
const dashboardData = {
  "kpiCards": [
    { "id": 1, "title": "Total Customers", "value": "10,284", "subtitle": "Customers", "growth": "21.5%", "icon": "users", "color": "bg-blue-100", "iconColor": "text-blue-500" },
    { "id": 2, "title": "Total Revenue", "value": "$84,284", "subtitle": "Revenue", "growth": "12.8%", "icon": "dollar", "color": "bg-green-100", "iconColor": "text-green-500" },
    { "id": 3, "title": "Conversion Rate", "value": "68.4%", "subtitle": "Conversion", "growth": "8.2%", "icon": "trending", "color": "bg-purple-100", "iconColor": "text-purple-500" },
    { "id": 4, "title": "Avg. Tour Price", "value": "$1,240", "subtitle": "Avg. Price", "growth": "5.6%", "icon": "map", "color": "bg-orange-100", "iconColor": "text-orange-500" }
  ],
  "customersByCountry": [
    { "country": "USA", "percentage": 40, "customers": 4112, "color": "#8884d8" },
    { "country": "Canada", "percentage": 25, "customers": 2570, "color": "#82ca9d" },
    { "country": "UK", "percentage": 20, "customers": 2056, "color": "#ffc658" },
    { "country": "Australia", "percentage": 15, "customers": 1542, "color": "#ff8042" }
  ],
  "leadsData": [
    { "week": "Week 1", "leads": 400, "leadsDotted": 300 },
    { "week": "Week 2", "leads": 300, "leadsDotted": 200 },
    { "week": "Week 3", "leads": 500, "leadsDotted": 400 },
    { "week": "Week 4", "leads": 450, "leadsDotted": 350 }
  ],
  "revenueData": [
    { "month": "Jan", "revenue": 1.8 },
    { "month": "Feb", "revenue": 1.5 },
    { "month": "Mar", "revenue": 1.9 },
    { "month": "Apr", "revenue": 1.6 },
    { "month": "May", "revenue": 1.8 },
    { "month": "Jun", "revenue": 2.0 }
  ],
  "tourCategories": [
    { "name": "Adventure Tours", "value": 35, "percentage": 35, "customers": 2847, "color": "#A2D2FF" },
    { "name": "Cultural Tours", "value": 28, "percentage": 28, "customers": 2274, "color": "#00B8A9" },
    { "name": "Luxury Tours", "value": 22, "percentage": 22, "customers": 1786, "color": "#FFB3C6" },
    { "name": "Eco Tours", "value": 15, "percentage": 15, "customers": 1218, "color": "#CDB4DB" }
  ],
  "conversionData": [
    { "month": "Jan", "conversion": 150, "total": 200, "percentage": 75.0 },
    { "month": "Feb", "conversion": 180, "total": 220, "percentage": 81.8 },
    { "month": "Mar", "conversion": 220, "total": 250, "percentage": 88.0 },
    { "month": "Apr", "conversion": 200, "total": 240, "percentage": 83.3 },
    { "month": "May", "conversion": 250, "total": 280, "percentage": 89.3 },
    { "month": "Jun", "conversion": 230, "total": 260, "percentage": 88.5 }
  ]
};


// =====================================================================================
// 1. CHILD COMPONENTS (MEMOIZED FOR PERFORMANCE)
// =====================================================================================

// --- KPICard Component ---
interface KPICardProps {
  title: string; value: string; subtitle: string; growth: string;
  icon: 'users' | 'dollar' | 'trending' | 'map';
  color: string; iconColor: string;
}
const KPICard: React.FC<KPICardProps> = memo(({ title, value, subtitle, growth, icon, color, iconColor }) => {
  const IconComponent = { users: Users, dollar: DollarSign, trending: TrendingUp, map: MapPin }[icon];
  return (
    <div className={`rounded-2xl shadow-sm border border-gray-200 p-4 flex flex-col justify-between ${color}`}>
      <div className="flex justify-between items-start">
        <div className="w-12 h-12 rounded-lg flex items-center justify-center bg-black/5"><IconComponent className={`${iconColor} w-6 h-6`} /></div>
        <div className="flex items-center bg-green-500 text-white text-xs font-medium px-2 py-1 rounded-full"><ArrowUpRight size={12} className="mr-1" />{growth}</div>
      </div>
      <div>
        <p className="text-sm font-medium text-gray-700">{title}</p>
        <div className="flex items-baseline space-x-2 mt-1">
          <span className="text-2xl font-bold text-gray-900">{value}</span>
          <span className="text-sm font-medium text-gray-600 truncate">{subtitle}</span>
        </div>
      </div>
    </div>
  );
});

// --- CustomersByCountryChart Component ---
interface CountryData { country: string; percentage: number; customers: number; color: string; }
interface CustomersByCountryChartProps { data: CountryData[]; }
const CustomersByCountryChart: React.FC<CustomersByCountryChartProps> = memo(({ data }) => {
  return (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200 h-full">
      <div className="flex items-center justify-between mb-6"><h2 className="text-lg font-semibold text-gray-900">Customers by Country</h2><select className="px-3 py-1.5 border text-xs rounded-full font-medium text-gray-600 border-gray-300 hover:border-teal-500 focus:outline-none"><option>Last Week</option><option>Last Month</option></select></div>
      <div className="flex flex-col md:flex-row items-center gap-6">
        <div className="w-48 h-48 shrink-0"><ResponsiveContainer width="100%" height="100%"><PieChart><Pie data={data} cx="50%" cy="50%" innerRadius={60} outerRadius={80} paddingAngle={2} dataKey="percentage">{data.map((entry, index) => (<Cell key={`cell-${index}`} fill={entry.color} />))}</Pie></PieChart></ResponsiveContainer></div>
        <div className="flex-1 w-full"><div className="space-y-3">{data.map((item, index) => (<div key={index} className="flex items-center justify-between text-sm"><div className="flex items-center gap-x-3"><div className="w-3 h-3 rounded-full" style={{ backgroundColor: item.color }}></div><span className="font-medium text-gray-700">{item.country}</span></div><span className="font-semibold text-gray-800">{item.customers.toLocaleString()}</span></div>))}</div></div>
      </div>
    </div>
  );
});

// --- LeadsChart (Line Chart) Component ---
interface LeadData { week: string; leads: number; leadsDotted: number; }
interface LeadsChartProps { data: LeadData[]; }
const LeadsChart: React.FC<LeadsChartProps> = memo(({ data }) => {
  return (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200 h-full flex flex-col">
      <div className="flex items-center justify-between mb-4"><h2 className="text-lg font-semibold text-gray-900">Total Leads</h2><select className="px-3 py-1.5 border text-xs rounded-full font-medium text-gray-600 border-gray-300 hover:border-teal-500 focus:outline-none"><option>Last Week</option><option>Last Month</option></select></div>
      <div className="flex-grow"><ResponsiveContainer width="100%" height="100%"><LineChart data={data} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}><CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" /><XAxis dataKey="week" tick={{ fontSize: 12 }} stroke="#9ca3af" /><YAxis tick={{ fontSize: 12 }} stroke="#9ca3af" /><Tooltip contentStyle={{ borderRadius: '0.5rem', fontSize: '0.875rem' }} /><Line type="monotone" dataKey="leads" stroke="#10b981" strokeWidth={2} activeDot={{ r: 8 }} /><Line type="monotone" dataKey="leadsDotted" stroke="#6366f1" strokeWidth={2} strokeDasharray="5 5" /></LineChart></ResponsiveContainer></div>
    </div>
  );
});


// --- RevenueChart Component ---
interface RevenueData { month: string; revenue: number; }
interface RevenueChartProps { data: RevenueData[]; }
const RevenueChart: React.FC<RevenueChartProps> = memo(({ data }) => {
  return (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200 h-full flex flex-col">
      <div className="flex items-center justify-between mb-4"><h2 className="text-lg font-semibold text-gray-900">Total Revenue</h2><select className="px-3 py-1.5 border text-xs rounded-full font-medium text-gray-600 border-gray-300 hover:border-teal-500 focus:outline-none"><option>Last 6 Months</option></select></div>
      <div className="flex-grow"><ResponsiveContainer width="100%" height="100%"><BarChart data={data} margin={{ top: 5, right: 5, left: -20, bottom: 5 }}><CartesianGrid strokeDasharray="3 3" vertical={false} stroke="#e5e7eb" /><XAxis dataKey="month" tick={{ fontSize: 12 }} stroke="#9ca3af" /><YAxis tickFormatter={(value) => `${value}L`} tick={{ fontSize: 12 }} stroke="#9ca3af" /><Tooltip cursor={{ fill: 'rgba(0,0,0,0.05)' }} contentStyle={{ borderRadius: '0.5rem', fontSize: '0.875rem' }} formatter={(value: number) => [`${value} L`, "Revenue"]} /><Bar dataKey="revenue" fill="#8884d8" radius={[4, 4, 0, 0]} maxBarSize={40} /></BarChart></ResponsiveContainer></div>
    </div>
  );
});

// --- MonthlyConversionChart (Pink Box) ---
const MonthlyConversionChart: React.FC = memo(() => {
  return (
    <div className="bg-[#FDEEE1] rounded-2xl p-6 shadow-sm border border-gray-200 h-full flex flex-col justify-between">
      <div>
        <div className="flex justify-between items-start">
          <div className="w-12 h-12 rounded-lg flex items-center justify-center bg-[#FFD8B6]"><TrendingUp className="w-6 h-6 text-[#d97706]" /></div>
          <div className="flex items-center bg-green-500 text-white text-xs font-medium px-2 py-1 rounded-full"><ArrowUpRight size={12} className="mr-1" />20%</div>
        </div>
        <h3 className="text-lg font-bold text-gray-900 mt-4">Leads turned into customers</h3>
      </div>
      <p className="text-sm text-gray-700 leading-relaxed">This shows the percentage of potential clients who showed interest and successfully booked a trip, indicating sales effectiveness.</p>
    </div>
  );
});

// --- ConcentricTourGraph Component ---
interface TourCategory { name: string; value: number; percentage: number; customers: number; color: string; }
interface ConcentricTourGraphProps { data: TourCategory[]; }
const ConcentricTourGraph: React.FC<ConcentricTourGraphProps> = memo(({ data }) => {
  const size = 200, center = size / 2, maxRadius = 90, strokeWidth = 16, gap = 6;
  return (
    <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-200 h-full">
      <div className="flex items-center justify-between mb-6"><h2 className="text-lg font-semibold text-gray-900">Total Tours</h2><select className="px-3 py-1.5 border text-xs rounded-full font-medium text-gray-600 border-gray-300 hover:border-teal-500 focus:outline-none"><option>Last Week</option></select></div>
      <div className="flex flex-col md:flex-row items-center gap-6">
        <div className="relative shrink-0" style={{ width: size, height: size }}><svg width={size} height={size} className="transform -rotate-90">{data.map((item, index) => { const radius = maxRadius - index * (strokeWidth + gap); const circumference = 2 * Math.PI * radius; const dashArray = (item.percentage / 100) * circumference; return (<g key={index}><circle cx={center} cy={center} r={radius} fill="none" stroke="#f5f5f5" strokeWidth={strokeWidth} /><circle cx={center} cy={center} r={radius} fill="none" stroke={item.color} strokeWidth={strokeWidth} strokeLinecap="round" strokeDasharray={`${dashArray} ${circumference}`} /></g>);})}</svg></div>
        <div className="flex-1 w-full"><div className="space-y-3">{data.map((item) => (<div key={item.name} className="flex items-center justify-between text-sm"><div className="flex items-center gap-x-3"><span className="w-3 h-3 shrink-0 rounded-full" style={{ backgroundColor: item.color }} /><span>{item.name}</span></div><span className="font-semibold">{item.percentage}%</span></div>))}</div></div>
      </div>
    </div>
  );
});

// --- ConversionChart (Vertical Bar) Component ---
interface ConversionData { month: string; conversion: number; total: number; percentage: number; }
interface ConversionChartProps { data: ConversionData[]; }
const ConversionChart: React.FC<ConversionChartProps> = memo(({ data }) => {
  return (
    <div className="bg-white rounded-2xl border border-gray-200 p-6 shadow-sm w-full h-full flex flex-col">
      <div className="flex justify-between items-center mb-4"><h2 className="text-lg font-semibold text-gray-900">Monthly Conversion</h2><button className="px-3 py-1.5 border text-xs rounded-full font-medium text-gray-600 border-gray-300 hover:border-teal-500 focus:outline-none">Last 6 Months</button></div>
      <div className="flex-grow w-full"><ResponsiveContainer width="100%" height="100%"><BarChart data={data} layout="vertical" margin={{ top: 5, right: 30, left: 5, bottom: 5 }} barCategoryGap="30%"><CartesianGrid stroke="#e5e7eb" horizontal={false} /><YAxis dataKey="month" type="category" axisLine={false} tickLine={false} tick={{ fill: "#374151", fontSize: 13 }} width={60} /><XAxis type="number" axisLine={false} tickLine={false} tick={{ fill: "#6b7280", fontSize: 12 }} domain={[0, "dataMax + 20"]} /><Tooltip cursor={{ fill: "rgba(0,0,0,0.04)" }} contentStyle={{ borderRadius: "8px", border: "1px solid #e5e7eb", fontSize: "0.875rem" }} /><Bar dataKey="total" fill="#d1d5db" radius={[4, 4, 4, 4]} /><Bar dataKey="conversion" fill="#34d399" radius={[4, 4, 4, 4]}><LabelList dataKey="percentage" position="right" formatter={(v: number) => `${v.toFixed(0)}%`} style={{ fill: "#374151", fontSize: 12, fontWeight: "500" }} /></Bar></BarChart></ResponsiveContainer></div>
    </div>
  );
});


// =====================================================================================
// 2. MAIN DASHBOARD COMPONENT
// =====================================================================================
const Dashboard: React.FC = () => {
  return (
    // --- RESPONSIVENESS FIX: Removed max-width to allow fluid layout ---
    // The dashboard now uses the full width available, with padding for spacing.
    <div className="w-full p-4 md:p-6 lg:p-8">
        <div className="space-y-6">
          {/* Header */}
          <div className="flex flex-wrap items-center justify-between gap-4">
            <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
            <div className="flex items-center flex-wrap gap-4">
              <div className="relative">
                <input type="text" placeholder="Search Here..." className="pl-4 pr-10 py-2 w-52 h-9 bg-white border border-gray-300 rounded-full text-sm placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-teal-500" />
                <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-600" />
              </div>
              <button className="flex items-center justify-center gap-x-2 px-5 py-2 w-52 h-9 bg-teal-500 hover:bg-teal-600 rounded-full text-sm font-medium text-white transition-colors">
                <span>Create New Itinerary</span>
                <ChevronDown className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* KPI Cards */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
            {dashboardData.kpiCards.map((card) => (
              <KPICard key={card.id} title={card.title} value={card.value} subtitle={card.subtitle} growth={card.growth} icon={card.icon} color={card.color} iconColor={card.iconColor} />
            ))}
          </div>

          {/* --- RESPONSIVENESS FIX: Advanced Adaptive Grid for Charts --- 
              - Base: 1 column
              - Large screens (lg): 2 columns
              - Extra-large screens (2xl): 3 columns
              This ensures the layout adapts beautifully to wider monitors.
          */}
          <div className="grid grid-cols-1 lg:grid-cols-2 2xl:grid-cols-3 gap-6">
            {/* These components will now automatically reflow based on screen size */}
            <CustomersByCountryChart data={dashboardData.customersByCountry} />
            <LeadsChart data={dashboardData.leadsData} />
            <RevenueChart data={dashboardData.revenueData} />
            <MonthlyConversionChart />
            <ConcentricTourGraph data={dashboardData.tourCategories} />
            <ConversionChart data={dashboardData.conversionData} />
          </div>
        </div>
    </div>
  );
};

export default Dashboard;

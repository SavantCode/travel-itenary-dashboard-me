import React, { useState, useMemo, useEffect, FC, ChangeEvent } from 'react';
import { Search, Download, ChevronLeft, ChevronRight } from 'lucide-react';

// --- TYPE DEFINITIONS ---
interface Lead {
    id: number;
    date: string;
    customerName: string;
    email: string;
    phone: string;
    address: string;
    owner: string;
}

interface Customer {
    id: number;
    date: string;
    customerName: string;
    status: 'Active' | 'Inactive';
    lastContact: string;
    totalSpent: string;
}

interface Revenue {
    id: number;
    date: string;
    transactionId: string;
    amount: number;
    product: string;
    paymentMethod: 'Credit Card' | 'PayPal' | 'Bank Transfer';
}

interface Agent {
    id: number;
    date: string;
    agentName: string;
    leadsClosed: number;
    totalSales: string;
    commission: string;
}

type ReportData = Lead | Customer | Revenue | Agent;
type TabId = 'leads' | 'customers' | 'revenue' | 'agents';


// --- MOCK DATA ---
const leadsData: Lead[] = [
    { id: 1, date: '2024-12-27', customerName: 'Priya Patel', email: 'priya.patel@example.com', phone: '+1 (555) 101-2345', address: '123 Main St, Mumbai', owner: 'Rashmi Singh' },
    { id: 2, date: '2024-12-26', customerName: 'Aarav Mehta', email: 'aarav.mehta@example.com', phone: '+1 (555) 102-2345', address: '456 Elm St, Delhi', owner: 'Nikhil Sharma' },
    { id: 3, date: '2024-12-25', customerName: 'Fatima Khan', email: 'fatima.khan@example.com', phone: '+1 (555) 103-2345', address: '789 Oak St, Bangalore', owner: 'Rashmi Singh' },
    { id: 4, date: '2024-12-24', customerName: 'Liam Oâ€™Connor', email: 'liam.oconnor@example.com', phone: '+1 (555) 104-2345', address: '321 Pine St, Chennai', owner: 'Ravi Kapoor' },
    { id: 5, date: '2024-12-23', customerName: 'Emily Zhang', email: 'emily.zhang@example.com', phone: '+1 (555) 105-2345', address: '654 Cedar St, Kolkata', owner: 'Rashmi Singh' },
    { id: 6, date: '2024-11-20', customerName: 'Carlos Rivera', email: 'carlos.rivera@example.com', phone: '+1 (555) 106-2345', address: '987 Birch St, Hyderabad', owner: 'Nikhil Sharma' },
    { id: 7, date: '2024-11-15', customerName: 'Grace Kim', email: 'grace.kim@example.com', phone: '+1 (555) 107-2345', address: '246 Maple St, Pune', owner: 'Rashmi Singh' },
];

const customersData: Customer[] = [
    { id: 1, date: '2024-12-20', customerName: 'John Doe', status: 'Active', lastContact: '2024-12-15', totalSpent: '$5,400' },
    { id: 2, date: '2024-12-18', customerName: 'Jane Smith', status: 'Active', lastContact: '2024-12-10', totalSpent: '$12,300' },
    { id: 3, date: '2024-11-30', customerName: 'Sam Wilson', status: 'Inactive', lastContact: '2024-09-01', totalSpent: '$1,200' },
    { id: 4, date: '2024-11-25', customerName: 'Maria Garcia', status: 'Active', lastContact: '2024-11-24', totalSpent: '$8,750' },
];

const revenueData: Revenue[] = [
    { id: 1, date: '2024-12-27', transactionId: 'TRX-001', amount: 1500, product: 'Premium Package', paymentMethod: 'Credit Card' },
    { id: 2, date: '2024-12-26', transactionId: 'TRX-002', amount: 750, product: 'Standard Package', paymentMethod: 'PayPal' },
    { id: 3, date: '2024-12-25', transactionId: 'TRX-003', amount: 2500, product: 'Enterprise Solution', paymentMethod: 'Bank Transfer' },
    { id: 4, date: '2024-11-10', transactionId: 'TRX-004', amount: 1200, product: 'Premium Package', paymentMethod: 'Credit Card' },
];

const agentsData: Agent[] = [
    { id: 1, date: '2024-12-01', agentName: 'Rashmi Singh', leadsClosed: 25, totalSales: '$55,000', commission: '$5,500' },
    { id: 2, date: '2024-12-01', agentName: 'Nikhil Sharma', leadsClosed: 18, totalSales: '$42,000', commission: '$4,200' },
    { id: 3, date: '2024-12-01', agentName: 'Ravi Kapoor', leadsClosed: 32, totalSales: '$71,000', commission: '$7,100' },
    { id: 4, date: '2024-11-01', agentName: 'Sunita Patil', leadsClosed: 15, totalSales: '$35,000', commission: '$3,500' },
];

const allData: Record<TabId, ReportData[]> = {
    leads: leadsData,
    customers: customersData,
    revenue: revenueData,
    agents: agentsData,
};

const TABS: { id: TabId; label: string }[] = [
  { id: 'leads', label: 'Leads' },
  { id: 'customers', label: 'Customers' },
  { id: 'revenue', label: 'Revenue' },
  { id: 'agents', label: 'Agents' }
];

const HEADERS: Record<TabId, string[]> = {
    leads: ['Customer Name', 'Email', 'Phone', 'Address', 'Owner'],
    customers: ['Customer Name', 'Status', 'Last Contact', 'Total Spent'],
    revenue: ['Transaction ID', 'Amount', 'Product', 'Payment Method'],
    agents: ['Agent Name', 'Leads Closed', 'Total Sales', 'Commission'],
};

const RECORDS_PER_PAGE = 5;

// --- Helper component for rendering table cells ---
const TableRow: FC<{ item: ReportData; activeTab: TabId }> = ({ item, activeTab }) => {
    const cellClass = "px-6 py-4 text-sm text-gray-600 whitespace-nowrap";

    switch (activeTab) {
        case 'leads':
            const lead = item as Lead;
            return (
                <>
                    <td className={cellClass}>{lead.customerName}</td>
                    <td className={cellClass}>{lead.email}</td>
                    <td className={cellClass}>{lead.phone}</td>
                    <td className={cellClass}>{lead.address}</td>
                    <td className={cellClass}>{lead.owner}</td>
                </>
            );
        case 'customers':
            const customer = item as Customer;
            return (
                <>
                    <td className={cellClass}>{customer.customerName}</td>
                    <td className={cellClass}>
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${customer.status === 'Active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                            {customer.status}
                        </span>
                    </td>
                    <td className={cellClass}>{customer.lastContact}</td>
                    <td className={cellClass}>{customer.totalSpent}</td>
                </>
            );
        case 'revenue':
            const revenue = item as Revenue;
            return (
                <>
                    <td className={cellClass}>{revenue.transactionId}</td>
                    <td className={cellClass}>${revenue.amount.toLocaleString()}</td>
                    <td className={cellClass}>{revenue.product}</td>
                    <td className={cellClass}>{revenue.paymentMethod}</td>
                </>
            );
        case 'agents':
            const agent = item as Agent;
            return (
                <>
                    <td className={cellClass}>{agent.agentName}</td>
                    <td className={cellClass}>{agent.leadsClosed}</td>
                    <td className={cellClass}>{agent.totalSales}</td>
                    <td className={cellClass}>{agent.commission}</td>
                </>
            );
        default:
            return null;
    }
};


// --- MAIN COMPONENT ---
const ReportsPage: FC = () => {
    const [activeTab, setActiveTab] = useState<TabId>('leads');
    const [searchQuery, setSearchQuery] = useState('');
    const [currentPage, setCurrentPage] = useState(1);
    const [selectedRows, setSelectedRows] = useState<number[]>([]);
    
    // Defaulting to a valid date range for demonstration
    const [startDate, setStartDate] = useState('2024-11-01');
    const [endDate, setEndDate] = useState('2024-12-27');
    const [appliedDateRange, setAppliedDateRange] = useState<{ start: string | null; end: string | null }>({ start: '2024-11-01', end: '2024-12-27' });

    const filteredData = useMemo(() => {
        let data: ReportData[] = allData[activeTab];

        if (searchQuery) {
            data = data.filter((item: ReportData) =>
                Object.values(item).some(value =>
                    String(value).toLowerCase().includes(searchQuery.toLowerCase())
                )
            );
        }

        if (appliedDateRange.start && appliedDateRange.end) {
            const start = new Date(appliedDateRange.start);
            const end = new Date(appliedDateRange.end);
            // Add 1 day to the end date to make the range inclusive
            end.setDate(end.getDate() + 1);
            data = data.filter((item: ReportData) => {
                const itemDate = new Date(item.date);
                return itemDate >= start && itemDate < end;
            });
        }

        return data;
    }, [activeTab, searchQuery, appliedDateRange]);

    const paginatedData = useMemo(() => {
        const startIndex = (currentPage - 1) * RECORDS_PER_PAGE;
        return filteredData.slice(startIndex, startIndex + RECORDS_PER_PAGE);
    }, [filteredData, currentPage]);

    const totalPages = Math.ceil(filteredData.length / RECORDS_PER_PAGE);

    useEffect(() => {
        setCurrentPage(1);
        setSelectedRows([]);
    }, [activeTab, searchQuery, appliedDateRange]);

    const handleTabClick = (tabId: TabId) => {
        setActiveTab(tabId);
    };

    const handleDateFilterApply = () => {
        if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
            // Replaced alert with console.error for better development experience
            console.error("Start date cannot be after end date.");
            return;
        }
        setAppliedDateRange({ start: startDate, end: endDate });
    };

    const handleSelectAll = (e: ChangeEvent<HTMLInputElement>) => {
        if (e.target.checked) {
            setSelectedRows(paginatedData.map((item: ReportData) => item.id));
        } else {
            setSelectedRows([]);
        }
    };

    const handleSelectRow = (id: number) => {
        setSelectedRows(prev =>
            prev.includes(id) ? prev.filter(rowId => rowId !== id) : [...prev, id]
        );
    };

    return (
        <div className="p-6 bg-gray-50 min-h-screen font-sans">
            <div className="space-y-6">
                {/* Header */}
                <div className="flex items-center justify-between">
                    <h1 className="text-2xl font-bold text-gray-900">Reports</h1>
                    <div className="flex items-center space-x-4">
                        <div className="relative">
                            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                            <input
                                type="text"
                                placeholder="Search all fields..."
                                value={searchQuery}
                                onChange={(e: ChangeEvent<HTMLInputElement>) => setSearchQuery(e.target.value)}
                                className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent w-64"
                            />
                        </div>
                        <button className="flex items-center space-x-2 bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded-lg transition-colors">
                            <Download className="w-4 h-4" />
                            <span>Download Reports</span>
                        </button>
                    </div>
                </div>

                {/* Tabs */}
                <div className="flex space-x-1 bg-gray-200 p-1 rounded-lg w-fit">
                    {TABS.map((tab) => (
                        <button
                            key={tab.id}
                            onClick={() => handleTabClick(tab.id)}
                            className={`px-6 py-2 rounded-md text-sm font-medium transition-colors ${
                                activeTab === tab.id
                                    ? 'bg-teal-500 text-white shadow'
                                    : 'text-gray-600 hover:bg-gray-300'
                            }`}
                        >
                            {tab.label}
                        </button>
                    ))}
                </div>

                {/* --- UPDATED DATE FILTER SECTION --- */}
                {/* This block is replaced with the new design while keeping all original functionality. */}
                <div className="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                    <div className="flex items-center space-x-4">
                        {/* Dynamic Report Title */}
                        <span
                            className="font-medium text-gray-700"
                            // For the Raleway font, ensure it's loaded in your project's CSS.
                            style={{ fontFamily: 'Raleway, sans-serif', fontSize: '12px' }}
                        >
                            {TABS.find(t => t.id === activeTab)?.label} Performance Reports
                        </span>

                        {/* Styled Date Range Picker */}
                        <div className="flex items-center space-x-2.5 rounded-[5px] border border-gray-200 bg-white px-3 py-1 shadow-sm">
                            <span className="text-xs font-medium text-gray-400">FROM</span>
                            <input
                                type="date"
                                value={startDate}
                                onChange={(e: ChangeEvent<HTMLInputElement>) => setStartDate(e.target.value)}
                                className="border-0 bg-transparent p-0 text-xs font-medium text-gray-700 focus:outline-none focus:ring-0"
                                style={{ fontFamily: 'Raleway, sans-serif' }}
                            />
                            <span className="text-gray-200">|</span>
                            <span className="text-xs font-medium text-gray-400">TO</span>
                            <input
                                type="date"
                                value={endDate}
                                onChange={(e: ChangeEvent<HTMLInputElement>) => setEndDate(e.target.value)}
                                className="border-0 bg-transparent p-0 text-xs font-medium text-gray-700 focus:outline-none focus:ring-0"
                                style={{ fontFamily: 'Raleway, sans-serif' }}
                            />
                        </div>

                        {/* "Apply Filter" Button */}
                        <button
                            onClick={handleDateFilterApply}
                            className="px-4 py-1.5 bg-gray-700 text-white text-xs font-medium rounded-md hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-gray-800 focus:ring-opacity-50"
                            style={{ fontFamily: 'Raleway, sans-serif' }}
                        >
                            Apply Filter
                        </button>
                    </div>
                </div>


                {/* Table */}
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
                    <div className="overflow-x-auto">
                        <table className="w-full">
                            <thead className="bg-gray-50 border-b border-gray-200">
                                <tr>
                                    <th className="px-6 py-4 text-left">
                                        <input
                                            type="checkbox"
                                            checked={selectedRows.length === paginatedData.length && paginatedData.length > 0}
                                            onChange={handleSelectAll}
                                            className="w-4 h-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500"
                                        />
                                    </th>
                                    {HEADERS[activeTab].map(header => (
                                        <th key={header} className="px-6 py-4 text-left text-sm font-medium text-gray-900 uppercase tracking-wider">{header}</th>
                                    ))}
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200">
                                {paginatedData.map((item) => (
                                    <tr key={item.id} className={`hover:bg-gray-50 ${selectedRows.includes(item.id) ? 'bg-teal-50' : ''}`}>
                                        <td className="px-6 py-4">
                                            <input
                                                type="checkbox"
                                                checked={selectedRows.includes(item.id)}
                                                onChange={() => handleSelectRow(item.id)}
                                                className="w-4 h-4 text-teal-600 border-gray-300 rounded focus:ring-teal-500"
                                            />
                                        </td>
                                        <TableRow item={item} activeTab={activeTab} />
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                {/* Table Footer & Pagination */}
                <div className="flex items-center justify-between text-sm text-gray-600">
                    <span>Showing {paginatedData.length > 0 ? ((currentPage - 1) * RECORDS_PER_PAGE) + 1 : 0}-{(currentPage - 1) * RECORDS_PER_PAGE + paginatedData.length} of {filteredData.length} records</span>
                    {totalPages > 1 && (
                        <div className="flex items-center space-x-1">
                            <button onClick={() => setCurrentPage(p => Math.max(1, p - 1))} disabled={currentPage === 1} className="p-2 border border-gray-300 rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed">
                                <ChevronLeft className="w-4 h-4" />
                            </button>
                            {[...Array(totalPages).keys()].map(num => (
                                <button key={num + 1} onClick={() => setCurrentPage(num + 1)} className={`px-4 py-2 rounded-md ${currentPage === num + 1 ? 'bg-teal-500 text-white' : 'border border-gray-300 hover:bg-gray-100'}`}>
                                    {num + 1}
                                </button>
                            ))}
                            <button onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages} className="p-2 border border-gray-300 rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed">
                                <ChevronRight className="w-4 h-4" />
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default ReportsPage;
